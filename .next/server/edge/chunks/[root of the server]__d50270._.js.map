{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["// // middleware.ts\r\n// import axios from 'axios';\r\n// import { NextResponse } from 'next/server'\r\n// import type { NextRequest } from 'next/server'\r\n// import axiosInstance from './services/apiClient';\r\n\r\n// export default async function middleware(request: NextRequest) {\r\n//   const protectedRoutes = ['/authenticated']\r\n//   console.log('Request:', request)\r\n//   const isProtectedRoute = protectedRoutes.some(route => \r\n//     request.nextUrl.pathname.startsWith(route)\r\n//   )\r\n\r\n//   // Nếu là route được bảo vệ\r\n//   if (isProtectedRoute) {\r\n//     try {\r\n//       // Gọi API check token của bạn bằng axios\r\n//       const response = await axiosInstance.get('/api/auth/check-token')\r\n//         console.log('Response:', response)\r\n//       if (response.status !== 200) {\r\n//         return NextResponse.redirect(new URL('/login', request.url))\r\n//       }\r\n//     } catch (error) {\r\n//       // Nếu có lỗi kết nối\r\n//       return NextResponse.redirect(new URL('/login', request.url))\r\n//     }\r\n//   }\r\n\r\n//   return NextResponse.next()\r\n// }\r\n\r\n// export const config = {\r\n//   matcher: ['/authenticated/:path*']\r\n// }"],"names":[],"mappings":"AAAA,mBAAmB;AACnB,6BAA6B;AAC7B,6CAA6C;AAC7C,iDAAiD;AACjD,oDAAoD;AAEpD,mEAAmE;AACnE,+CAA+C;AAC/C,qCAAqC;AACrC,4DAA4D;AAC5D,iDAAiD;AACjD,MAAM;AAEN,gCAAgC;AAChC,4BAA4B;AAC5B,YAAY;AACZ,kDAAkD;AAClD,0EAA0E;AAC1E,6CAA6C;AAC7C,uCAAuC;AACvC,uEAAuE;AACvE,UAAU;AACV,wBAAwB;AACxB,8BAA8B;AAC9B,qEAAqE;AACrE,QAAQ;AACR,MAAM;AAEN,+BAA+B;AAC/B,IAAI;AAEJ,0BAA0B;AAC1B,uCAAuC;AACvC,IAAI"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}